---
// EmailModal.astro
---
<div id="emailModal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
  <div class="bg-white rounded-lg p-8 max-w-md w-full mx-4">
    <div id="modalContent">
      <h3 class="text-xl font-semibold mb-4">Download Template</h3>
      <form id="emailForm" class="space-y-4">
        <div>
          <label for="email" class="block text-sm font-medium text-gray-700">Work Email Address</label>
          <input
            type="email"
            id="email"
            class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary"
            placeholder="your.name@company.com"
            required
          />
          <p id="emailError" class="text-red-500 text-sm mt-1 hidden"></p>
        </div>
        <button
          type="submit"
          class="w-full rounded-md bg-primary px-4 py-2 text-white hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
        >
          Email me the template
        </button>
      </form>
      
      <div id="successMessage" class="hidden">
        <div class="bg-green-50 border border-green-200 rounded-md p-4 mt-4">
          <p class="text-green-800">
            Template has been sent to your email address. Please check your spam folder if you don't see it in your inbox.
          </p>
        </div>
        <button
          id="closeModal"
          class="w-full mt-4 rounded-md bg-gray-200 px-4 py-2 text-gray-800 hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
        >
          Close
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // First, declare the type extension
declare global {
  interface Window {
    showEmailModal: (templateLink: string, templateName: string) => void;
  }
}

  let currentTemplate = {
    link: '',
    name: ''
  };

  const emailModal = document.getElementById('emailModal');
  const emailForm = document.getElementById('emailForm') as HTMLFormElement;
  const emailInput = document.getElementById('email') as HTMLInputElement;
  const emailError = document.getElementById('emailError');
  const successMessage = document.getElementById('successMessage');
  const closeModalBtn = document.getElementById('closeModal');

  function validateEmail(email: string): string {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return 'Please enter a valid email address';
    }

    const domain = email.split('@')[1].toLowerCase();
    const forbiddenDomains = ['gmail.com', 'outlook.com'];
    if (forbiddenDomains.includes(domain)) {
      return 'Please use your work email address';
    }

    return '';
  }

  function showModal(templateLink: string, templateName: string) {
    if (emailModal) {
      currentTemplate.link = templateLink;
      currentTemplate.name = templateName;
      emailModal.classList.remove('hidden');
    }
  }

  function hideModal() {
    if (emailModal) {
      emailModal.classList.add('hidden');
      // Reset form
      emailForm.reset();
      if (emailError) emailError.classList.add('hidden');
      if (successMessage) successMessage.classList.add('hidden');
      document.getElementById('emailForm')?.classList.remove('hidden');
    }
  }

  // Expose showModal to window object
  window.showEmailModal = showModal;

  // Handle form submission
  emailForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const email = emailInput.value;
    const errorMessage = validateEmail(email);

    if (errorMessage) {
      if (emailError) {
        emailError.textContent = errorMessage;
        emailError.classList.remove('hidden');
      }
      return;
    }

    if (emailError) emailError.classList.add('hidden');

    try {
      const response = await fetch(`https://dfd.com/send-template/${currentTemplate.link}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          email,
          templateName: currentTemplate.name 
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to send template');
      }

      // Show success message
      emailForm.classList.add('hidden');
      if (successMessage) successMessage.classList.remove('hidden');

    } catch (err) {
      if (emailError) {
        emailError.textContent = 'Failed to send template. Please try again.';
        emailError.classList.remove('hidden');
      }
    }
  });

  // Close modal handlers
  closeModalBtn?.addEventListener('click', hideModal);
  
  emailModal?.addEventListener('click', (e) => {
    if (e.target === emailModal) {
      hideModal();
    }
  });

  // Close on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      hideModal();
    }
  });
</script>