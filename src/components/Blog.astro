---
import Container from "./Container.astro";

interface Props {
  itemsPerPage?: number;
}

const { itemsPerPage = 6 } = Astro.props;

import templates from './templates.json' assert { type: 'json' };
---

<div id="templates">
  <Container>
    <div class="mb-12 space-y-2 text-center">
      <h2 class="text-3xl font-bold text-gray-800 md:text-4xl darkcancel:text-white">
        <span class="text-primary">100+ Free </span>Automation Templates
      </h2>
      <p class="lg:mx-auto lg:w-6/12 text-gray-600 darkcancel:text-gray-300">
        Get started with our free automation templates. Choose from our curated selection to streamline your workflow.
      </p>
    </div>
    
    <!-- Search Bar -->
    <div class="mb-8 w-full">
      <div class="flex gap-2 max-w-md mx-auto">
        <div class="relative flex-1">
          <input 
            type="text" 
            id="searchInput"
            placeholder="Search templates..."
            class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:border-primary focus:ring-1 focus:ring-primary darkcancel:bg-gray-700 darkcancel:border-gray-600 darkcancel:text-white"
          />
        </div>
        <button 
          id="searchButton"
          class="px-6 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors focus:outline-none focus:ring-2 focus:ring-primary/50"
        >
          Search
        </button>
      </div>
      <!-- Show All Button -->
      <div class="flex justify-center mt-4">
        <button 
          id="showAllButton"
          class="hidden px-4 py-2 text-primary hover:text-gray-600 transition-colors focus:outline-none"
        >
          ‚Üê Show All Templates
        </button>
      </div>
    </div>
    
    <!-- No Results Message -->
    <div id="noResults" class="hidden text-center py-8">
      <p class="text-gray-600 darkcancel:text-gray-300 mb-4">
        Sorry, no template matches your search query.
      </p>
      <p class="text-gray-500 darkcancel:text-gray-400">
        Try searching for: <span class="text-primary">Hubspot</span>, <span class="text-primary">Smartlead</span>, <span class="text-primary">Slack</span>, <span class="text-primary">Clay</span> or <span class="text-primary">onboarding</span>
      </p>
    </div>

    <div id="templateContainer" class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
      {templates.map((template) => (
        <div 
          class="group p-6 sm:p-8 rounded-3xl bg-white border border-gray-100 darkcancel:shadow-none darkcancel:border-gray-700 darkcancel:bg-gray-800 bg-opacity-50 shadow-2xl shadow-gray-600/10"
          data-category={template.category}
          data-template-link={template.downloadLink}
          data-template-name={template.name}
          data-template-description={template.description}
        >
          <div class="relative overflow-hidden rounded-xl">
            <img 
              src={`/100img/${template.image}`}
              alt={template.name} 
              loading="lazy" 
              width="1000" 
              height="300" 
              class="h-64 w-full object-cover object-top transition duration-500 group-hover:scale-105"
            />
          </div>
          <div class="mt-6 relative">
            <span class="text-sm text-primary mb-2 block">{template.category}</span>
            <h3 class="text-2xl font-semibold text-gray-800 darkcancel:text-white">
              {template.name}
            </h3>
            <p class="mt-6 mb-8 text-gray-600 darkcancel:text-gray-300">
              {template.description}
            </p>
            <button class="inline-block download-trigger" data-template-link={template.downloadLink} data-template-name={template.name}>
              <span class="text-info darkcancel:text-blue-300">Download</span>
            </button>
          </div>
        </div>
      ))}
    </div>
  </Container>
</div>

<!-- Email Modal -->
<div id="emailModal" class="fixed inset-0 backdrop-blur-sm hidden bg-black/30 !mt-0 z-50 flex items-center justify-center">
  <div class="absolute left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white rounded-lg p-8 max-w-md w-full mx-4">
    <div id="modalContent">
      <h3 class="text-xl font-semibold mb-4">Download Template</h3>
      <form id="emailForm" class="space-y-4">
        <div>
          <label for="email" class="block text-sm font-medium text-gray-700">Work Email Address</label>
          <input
            type="email"
            id="email"
            class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary"
            placeholder="your@work_email.com"
            required
          />
          <p id="emailError" class="text-red-500 text-sm mt-1 hidden"></p>
        </div>
        <button
          type="submit"
          class="w-full rounded-md bg-primary px-4 py-2 text-white hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
        >
          Email me the template
        </button>
      </form>
      
      <div id="successMessage" class="hidden">
        <div class="bg-green-50 border border-green-200 rounded-md p-4 mt-4">
          <p class="text-green-800">
            Template has been sent to your email address. Please check your spam folder if you don't see it in your inbox.
          </p>
        </div>
        <button
          id="closeModal"
          class="w-full mt-4 rounded-md bg-gray-200 px-4 py-2 text-gray-800 hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
        >
          Close
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  interface Template {
    name: string;
    category: string;
    downloadLink: string;
    description: string;
    image: string;
  }

  // Get DOM elements
  const searchInput = document.getElementById('searchInput') as HTMLInputElement;
  const searchButton = document.getElementById('searchButton');
  const showAllButton = document.getElementById('showAllButton');
  const templateContainer = document.getElementById('templateContainer');
  const noResults = document.getElementById('noResults');
  const emailModal = document.getElementById('emailModal');
  const emailForm = document.getElementById('emailForm') as HTMLFormElement;
  const emailInput = document.getElementById('email') as HTMLInputElement;
  const emailError = document.getElementById('emailError');
  const successMessage = document.getElementById('successMessage');
  const closeModalBtn = document.getElementById('closeModal');

  let currentTemplate = {
    link: '',
    name: ''
  };

  // Filter templates function
  function filterTemplates() {
    const searchTerm = searchInput.value.toLowerCase();
    const templates = document.querySelectorAll('#templateContainer > div');
    let hasResults = false;

    // Toggle Show All button visibility
    if (showAllButton) {
      showAllButton.style.display = searchTerm ? 'block' : 'none';
    }

    templates.forEach((template) => {
      const templateElement = template as HTMLElement;
      const name = templateElement.dataset.templateName?.toLowerCase() || '';
      const description = templateElement.dataset.templateDescription?.toLowerCase() || '';
      const category = templateElement.dataset.category?.toLowerCase() || '';
      
      // Search in name, description, and category
      const matchesSearch = 
        name.includes(searchTerm) || 
        description.includes(searchTerm) || 
        category.includes(searchTerm);

      templateElement.style.display = matchesSearch ? '' : 'none';
      if (matchesSearch) hasResults = true;
    });

    // Show/hide no results message
    if (noResults) {
      noResults.style.display = hasResults || !searchTerm ? 'none' : 'block';
      templateContainer!.style.display = hasResults || !searchTerm ? 'grid' : 'none';
    }
  }

  // Show all templates function
  function showAllTemplates() {
    if (searchInput) {
      searchInput.value = '';
    }
    filterTemplates();
  }

  // Email validation function
  function validateEmail(email: string): string {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return 'Please enter a valid email address';
    }

    const domain = email.split('@')[1].toLowerCase();
    const forbiddenDomains = ['gmail.com', 'outlook.com'];
    if (forbiddenDomains.includes(domain)) {
      return 'Please use your work email address';
    }

    return '';
  }

  // Modal functions
  function showModal() {
    if (emailModal) {
      emailModal.classList.remove('hidden');
    }
  }

  function hideModal() {
    if (emailModal) {
      emailModal.classList.add('hidden');
      // Reset form
      emailForm.reset();
      if (emailError) emailError.classList.add('hidden');
      if (successMessage) successMessage.classList.add('hidden');
      document.getElementById('emailForm')?.classList.remove('hidden');
    }
  }

  // Handle download button clicks
  document.querySelectorAll('.download-trigger').forEach(trigger => {
    trigger.addEventListener('click', (e) => {
      const button = e.currentTarget as HTMLElement;
      currentTemplate.link = button.dataset.templateLink || '';
      currentTemplate.name = button.dataset.templateName || '';
      showModal();
    });
  });

  // Handle form submission
  emailForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const email = emailInput.value;
    const errorMessage = validateEmail(email);

    if (errorMessage) {
      if (emailError) {
        emailError.textContent = errorMessage;
        emailError.classList.remove('hidden');
      }
      return;
    }

    if (emailError) emailError.classList.add('hidden');

    try {
      const response = await fetch(`http://127.0.0.1:54321/functions/v1/hello-world`, {
      // const response = await fetch(`https://zojdqohmdmgoczdcmaik.supabase.co/functions/v1/hello-world`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          email,
          templateName: currentTemplate.name,
          templateLink: currentTemplate.link
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to send template');
      }

      // Show success message
      emailForm.classList.add('hidden');
      if (successMessage) successMessage.classList.remove('hidden');

    } catch (err) {
      if (emailError) {
        emailError.textContent = 'Failed to send template. Please try again.';
        emailError.classList.remove('hidden');
      }
    }
  });

  // Add event listeners for search
  searchButton?.addEventListener('click', filterTemplates);
  showAllButton?.addEventListener('click', showAllTemplates);
  
  searchInput?.addEventListener('keyup', (e) => {
    if (e.key === 'Enter') {
      filterTemplates();
    }
  });

  // Close modal handlers
  closeModalBtn?.addEventListener('click', hideModal);
  
  emailModal?.addEventListener('click', (e) => {
    if (e.target === emailModal) {
      hideModal();
    }
  });

  // Close on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      hideModal();
    }
  });

  // Initial setup
  document.addEventListener('DOMContentLoaded', () => {
    filterTemplates();
  });
</script>